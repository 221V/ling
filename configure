#!/bin/bash

# This script has been created manually

REQ_OTP_REL=R16B01
LING_VER=0.2.3

# Default values
NETTLE_DIR=/usr/local/lib64
PREFIX=/usr/local

while true; do
	case "$1" in
	--with-prefix=*)
		PREFIX=${1#*=}
		shift
		;;
	--with-nettle=*)
		NETTLE_DIR=${1#*=}
		shift
		;;
	--help)
		cat <<EOF
--with-prefix=PREFIX  path prefix for the LING installation
--with-nettle=DIR     path to the Nettle library
EOF
		exit 0
		;;
	*)
		break
		;;
	esac
done

TEMPS="test.c test.o a.out"
cleanup() {
	rm -f $TEMPS
}
trap cleanup SIGINT SIGTERM

# gcc dependency
echo -ne "checking for gcc... "
if which gcc &>/dev/null; then
	echo yes
else
	echo no
cat <<EOF
--------------------------------------------------------------------------------
gcc not found. LING requires gcc (>= 4.8.1 recommended).
EOF
	cleanup
	exit 1
fi

# Erlang/OTP dependency
echo -ne "checking for erl... "
if which erl &>/dev/null; then
	echo yes
else
	echo no
cat <<EOF
--------------------------------------------------------------------------------
Erlang/OTP not found. LING requires Erlang/OTP $REQ_OTP_REL installed.
EOF
	cleanup
	exit 1
fi

#echo -ne "checking Erlang/OTP release... "
#OTP=`erl -noshell -eval 'erlang:display(erlang:system_info(otp_release)), halt()' |tr -d '\r"'`
#echo -ne "$OTP "
#if [ "$OTP" == "$REQ_OTP_REL" ]; then
#	echo ok
#else
#	echo "(incompatible)"
#	cat <<EOF
#--------------------------------------------------------------------------------
#LING requires a specific version of Erlang/OTP ($REQ_OTP_REL). You may need to build
#it from sources (http://erlang.org).
#EOF
#	exit 1
#fi
#
# Nettle dependency
echo -ne "checking for nettle... "
cat > test.c <<EOF
main() {
}
EOF
if gcc -L $NETTLE_DIR -Xlinker -r -static -nostdlib \
		test.c -lnettle &>/dev/null; then
	echo yes
else
	echo no
	cat <<EOF
--------------------------------------------------------------------------------
The core library of LING requires the *static* version of Nettle - a low-level
cryptographic library (http://www.lysator.liu.se/~nisse/nettle/). You need to
build it from sources. See core/lib/README. Use --with-nettle= option. For
example,

	./configure --with-nettle=/usr/local/lib64

EOF
	cleanup
	exit 1
fi

cat > Config.mk <<EOF
LING_VER := $LING_VER
NETTLE_DIR := $NETTLE_DIR
LING_ROOT := $PREFIX/lib/ling
BIN_DIR := $PREFIX/bin
EOF

cp Makefile.in Makefile

cleanup
echo "Run 'make' to build LING"

#EOF
